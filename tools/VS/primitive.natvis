<?xml version="1.0" encoding="utf-8"?>

<!-- Copyright (c) 2017 Hartmut Kaiser                                      -->

<!-- Use, modification and distribution are subject to the Boost Software   -->
<!-- License, Version 1.0. (See accompanying file LICENSE_1_0.txt           -->
<!-- or copy at http://www.boost.org/LICENSE_1_0.txt)                       -->

<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

    <Type Name="phylanx::ast::nil">
        <DisplayString>nil</DisplayString>
    </Type>

    <Type Name="phylanx::execution_tree::primitive_argument_type">
        <DisplayString Condition="(var.impl_.index_ == 0)">nil</DisplayString>
        <DisplayString Condition="(var.impl_.index_ == 1)">bool({var.impl_.data_.tail_.head_.value})</DisplayString>
        <DisplayString Condition="(var.impl_.index_ == 2)">std::int64_t({var.impl_.data_.tail_.tail_.head_.value})</DisplayString>
        <DisplayString Condition="(var.impl_.index_ == 3)">std::string({var.impl_.data_.tail_.tail_.tail_.head_.value})</DisplayString>
        <DisplayString Condition="(var.impl_.index_ == 4)">phylanx::ir::node_data&lt;double&gt;({var.impl_.data_.tail_.tail_.tail_.tail_.head_.value})</DisplayString>
        <DisplayString Condition="(var.impl_.index_ == 5)">phylanx::execution_tree::primitive({var.impl_.data_.tail_.tail_.tail_.tail_.tail_.head_.value})</DisplayString>
        <DisplayString Condition="(var.impl_.index_ == 6)">std::vector&lt;phylanx::ast::expression&gt;({var.impl_.data_.tail_.tail_.tail_.tail_.tail_.head_.value})</DisplayString>
        <DisplayString Condition="(var.impl_.index_ == 7)">phylanx::util::recursive_wrapper&lt;std::vector&lt;primitive_argument_type&gt;&gt;({var.impl_.data_.tail_.tail_.tail_.tail_.tail_.tail_.tail_.head_.value})</DisplayString>
        <Expand>
            <Item Name="[nil]" Condition="(var.impl_.index_ == 0)">"nil"</Item>
            <Item Name="[bool]" Condition="(var.impl_.index_ == 1)">var.impl_.data_.tail_.head_.value</Item>
            <Item Name="[std::int64_t]" Condition="(var.impl_.index_ == 2)">var.impl_.data_.tail_.tail_.head_.value</Item>
            <Item Name="[std::string]" Condition="(var.impl_.index_ == 3)">var.impl_.data_.tail_.tail_.tail_.head_.value</Item>
            <Item Name="[node_data]" Condition="(var.impl_.index_ == 4)">var.impl_.data_.tail_.tail_.tail_.tail_.head_.value</Item>
            <Item Name="[primitive]" Condition="(var.impl_.index_ == 5)">var.impl_.data_.tail_.tail_.tail_.tail_.tail_.head_.value</Item>
            <Item Name="[expressionlist]" Condition="(var.impl_.index_ == 6)">var.impl_.data_.tail_.tail_.tail_.tail_.tail_.tail_.head_.value</Item>
            <Item Name="[primitive_argument_type]" Condition="(var.impl_.index_ == 7)">var.impl_.data_.tail_.tail_.tail_.tail_.tail_.tail_.tail_.head_.value</Item>
        </Expand>
    </Type>

</AutoVisualizer>

