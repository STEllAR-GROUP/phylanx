#!/usr/bin/env physl
#
# Copyright (c) 2018 Parsa Amini
# Copyright (c) 2018 Hartmut Kaiser
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Phylanx K-Means algorithm example in Python. Iteratively clusters 250
# randomly generated points into 3 clusters for the specified number of
# iterations.
#
# Code adapted from: http://flothesof.github.io/k-means-numpy.html
# Original source code is BSD-licensed
#
# \param iterations Number of iterations
# \returns the cluster centroids

define(initialize_centroids, points, k, block(
    define(centroids, points),
    shuffle(centroids),
    slice(centroids, make_list(0, k))
))

define(closest_centroids, points, centroids, block(
    define(points_x,
        add_dim(slice_column(points, 0))
    ),
    define(points_y,
        add_dim(slice_column(points, 1))
    ),
    define(centroids_x,
        slice_column(centroids, 0)
    ),
    define(centroids_y,
        slice_column(centroids, 1)
    ),
    argmin(sqrt(
                power(points_x - centroids_x, 2
                )+power(points_y - centroids_y, 2)
        ), 0
    )
))

define(move_centroids, points, closest, centroids, block(
    map(lambda(k, block(
                define(x, closest == k),
                mean(points * add_dim(x), 1)
    )),
        range(shape(centroids, 0))
    )
))

define(kmeans, points, k, iterations, block(
    define(centroids, initialize_centroids(points, k)),
    for(define(i, 0), i < iterations, store(i, i + 1), block(
        store(centroids,
              apply(vstack, 
                    move_centroids(points,
                                   closest_centroids(points, centroids),
                                   centroids)))
    )),
    centroids
))

define(program, iterations, block(
    define(points, vstack(
        apply(vstack, map(lambda(x, random(2) * .75), range(150))) + [1., 0.],
        apply(vstack, map(lambda(x, random(2) * .25), range(50))) + [-.5, .5],
        apply(vstack, map(lambda(x, random(2) * .5), range(50))) + [-.5, -.5]
    )),
    define(k, 3),
    kmeans(points, k, iterations)
))

apply(program, sys_argv)
