// Copyright (c) 2019 Bita Hasheminezhad
// Copyright (c) 2019 Hartmut Kaiser
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#include <phylanx/phylanx.hpp>

#include <hpx/hpx_main.hpp>
#include <hpx/include/lcos.hpp>
#include <hpx/testing.hpp>

#include <string>
#include <utility>

phylanx::execution_tree::primitive_argument_type compile_and_run(
    std::string const& codestr)
{
    phylanx::execution_tree::compiler::function_list snippets;
    phylanx::execution_tree::compiler::environment env =
        phylanx::execution_tree::compiler::default_environment();

    auto const& code = phylanx::execution_tree::compile(codestr, snippets, env);
    return code.run();
}

///////////////////////////////////////////////////////////////////////////////
void test_separable_conv1d_operation(std::string const& code,
    std::string const& expected_str)
{
    HPX_TEST_EQ(compile_and_run(code), compile_and_run(expected_str));
}

///////////////////////////////////////////////////////////////////////////////
int main(int argc, char* argv[])
{

    test_separable_conv1d_operation(
        R"(separable_conv1d([[[1,2,3],[4,5,6],[7,8,9]],[[-1,-2,-3],[-4,-5,-6],
        [-7,-8,-9]],[[11,12,13],[14,15,16],[17,18,19]],[[-11,-12,-13],
        [-14,-15,-16] ,[17,18,19]]], [[[1,-1,0,0],[3,-3,4,-4],[1,0,13,0]],
        [[2,-42,0,5], [2,-2,10,-10],[2,2,12,3]]], [[[1,1],[1,2],[-2,3],[1,4],
        [1,6],[1,0],[-4,0],[11,6],[0,0],[10,0],[1,8],[12,33]]], "valid"))",
        "[[[ -563.,   981.], [-1055.,  1527.]],[[  563.,  -981.],"
        "[ 1055., -1527.]], [[-2203.,  2801.], [-2695.,  3347.]],"
        "[[ 2203., -2801.],[-1311.,   227.]]]");
    test_separable_conv1d_operation(
        R"(separable_conv1d([[[1,2,3],[4,5,6],[7,8,9]],[[-1,-2,-3],[-4,-5,-6],
        [-7,-8,-9]],[[11,12,13],[14,15,16],[17,18,19]],[[-11,-12,-13],
        [-14,-15,-16] ,[17,18,19]]], [[[1,-1,0,1],[13,-3,4,-4],[1,0,13,0]]],
        [[[1,1],[1,2],[-2,3],[1,4],[1,6],[1,0],[-4,0],[11,6],[0,0],[10,0],
        [1,8],[12,33]]], "valid"))",
        "[[[  -60.,   423.],[ -168.,   906.],[ -276.,  1389.]],"
        "[[   60.,  -423.],[  168.,  -906.],[  276., -1389.]],"
        "[[ -420.,  2033.],[ -528.,  2516.],[ -636.,  2999.]],"
        "[[  420., -2033.],[  528., -2516.],[ -636.,  2999.]]]");
    test_separable_conv1d_operation(
        R"(separable_conv1d([[[1,2,3],[4,5,6],[7,8,9]],[[-1,-2,-3],[-4,-5,-6],
        [-7,-8,-9]],[[11,12,13],[14,15,16],[17,18,19]],[[-11,-12,-13],
        [-14,-15,-16] ,[17,18,19]]], [[[1,-1,0,0],[3,-3,4,-4],[1,0,13,0]],
        [[2,-42,0,5], [2,-2,10,-10],[2,2,12,3]]], [[[1,1],[1,2],[-2,3],[1,4],
        [1,6],[1,0],[-4,0],[11,6],[0,0],[10,0],[1,8],[12,33]]], "valid", 3))",
        "[[[ -563.,   981.]],[[  563.,  -981.]],"
        "[[-2203.,  2801.]],[[ 2203., -2801.]]]");
    test_separable_conv1d_operation(
        R"(separable_conv1d([[[1,2,3],[4,5,6],[7,8,9]],[[-1,-2,-3],[-4,-5,-6],
        [-7,-8,-9]],[[11,12,13],[14,15,16],[17,18,19]],[[-11,-12,-13],
        [-14,-15,-16] ,[17,18,19]]], [[[1,-1,0,0],[3,-3,4,-4],[1,0,13,0]],
        [[2,-42,0,5], [2,-2,10,-10],[2,2,12,3]]], [[[1,1],[1,2],[-2,3],[1,4],
        [1,6],[1,0],[-4,0],[11,6],[0,0],[10,0],[1,8],[12,33]]], "valid", 1, 2))",
        "[[[ -914.,  1236.]], [[  914., -1236.]],"
        "[[-2554.,  3056.]], [[-1452.,   518.]]]");
    test_separable_conv1d_operation(
        R"(separable_conv1d([[[1,2,3],[4,5,6],[7,8,9]],[[-1,-2,-3],[-4,-5,-6],
        [-7,-8,-9]],[[11,12,13],[14,15,16],[17,18,19]],[[-11,-12,-13],
        [-14,-15,-16],[17,18,19]]], [[[1,-1,0,0],[3,-3,4,-4],[1,0,13,0]],
        [[2,-42,0,5],[2,-2,10,-10],[2,2,12,3]]], [[[1,1],[1,2],[-2,3],[1,4],
        [1,6],[1,0],[-4,0],[11,6],[0,0],[10,0],[1,8],[12,33]]], "same"))",
        "[[[ -563.,   981.],[-1055.,  1527.],[ -363.,   881.]],"
       "[[  563.,  -981.],[ 1055., -1527.],[  363.,  -881.]],"
       "[[-2203.,  2801.],[-2695.,  3347.],[ -833.,  1851.]],"
       "[[ 2203., -2801.],[-1311.,   227.],[ -833.,  1851.]]]");
    test_separable_conv1d_operation(
        R"(separable_conv1d([[[1,0,1],[4,0,0]],[[-1,0,0],[-4,0,0]],[[11,0,13],
        [14,0,0]],[[-11,0,0],[-14,0,0]]], [[[1,0,0,0,1],[1,3,0,0,1],
        [0,0,-3,0,1]],[[-1,0,2,0,1],[0,0,0,0,1],[0,0,6,0,1]]], [[[1,0,-1],
        [9,1,2],[6.5,1,-2],[0,5.6,-2],[-4,1,4],[6,-2,7],[9,-3,8],[-10,-4.2,1],
        [0,10,4.2],[33,3,0],[5,4,13],[0,3,0],[1,12,5],[-2,-1,2],[3,1,2]]],
        "same", 3, 1))",
        "[[[  29.,  -22.,   -6.]],[[ -29.,  -13.,   -7.]],"
        "[[  79., -402., -122.]],[[ -79.,  -53.,  -47.]]]");
    test_separable_conv1d_operation(
        R"(separable_conv1d([[[1,2,3],[4,5,6],[7,8,9]],[[-1,-2,-3],[-4,-5,-6],
        [-7,-8,-9]],[[11,12,13],[14,15,16],[17,18,19]],[[-11,-12,-13],
        [-14,-15,-16],[17,18,19]]], [[[1,-1,0,0],[3,-3,4,-4],[1,0,13,0]],
        [[2,-42,0,5],[2,-2,10,-10],[2,2,12,3]]], [[[1,1],[1,2],[-2,3],[1,4],
        [1,6],[1,0],[-4,0],[11,6],[0,0],[10,0],[1,8],[12,33]]], "same", 1, 3))",
        "[[[ -833.,   937.],[  -81.,   299.],[ -222.,   590.]],"
        "[[  833.,  -937.],[   81.,  -299.],[  222.,  -590.]],"
        "[[-2003.,  1787.],[ -551.,  1269.],[ -692.,  1560.]],"
        "[[-2003.,  1787.],[  551., -1269.],[  692., -1560.]]]");
    test_separable_conv1d_operation(
        R"(separable_conv1d([[[1,0,1],[4,0,0]],[[-1,0,0],[-4,0,0]],[[11,0,13],
        [14,0,0]],[[-11,0,0],[-14,0,0]]], [[[1,0,0,0,1],[1,3,0,0,1],
        [0,0,-3,0,1]],[[-1,0,2,0,1],[0,0,0,0,1],[0,0,6,0,1]]], [[[1,0,-1],
        [9,1,2],[6.5,1,-2],[0,5.6,-2],[-4,1,4],[6,-2,7],[9,-3,8],[-10,-4.2,1],
        [0,10,4.2],[33,3,0],[5,4,13],[0,3,0],[1,12,5],[-2,-1,2],[3,1,2]]],
        "same", 1, 2))",
        "[[[  32.,   12.,    4.],[  -3.,  -34.,  -10.]],"
        "[[ -32.,  -12.,   -4.],[   3.,   -1.,   -3.]],"
        "[[ 112.,   42.,   14.],[ -33., -444., -136.]],"
        "[[-112.,  -42.,  -14.],[  33.,  -11.,  -33.]]]");

    return hpx::util::report_errors();
}
