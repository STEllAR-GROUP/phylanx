// Copyright (c) 2019 Shahrzad Shirzad
// Copyright (c) 2019 Hartmut Kaiser
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#include <phylanx/phylanx.hpp>

#include <hpx/hpx_main.hpp>
#include <hpx/testing.hpp>

#include <string>
#include <utility>

///////////////////////////////////////////////////////////////////////////////
phylanx::execution_tree::primitive_argument_type compile_and_run(
    std::string const& codestr)
{
    phylanx::execution_tree::compiler::function_list snippets;
    phylanx::execution_tree::compiler::environment env =
        phylanx::execution_tree::compiler::default_environment();

    auto const& code = phylanx::execution_tree::compile(codestr, snippets, env);
    return code.run();
}

///////////////////////////////////////////////////////////////////////////////
void test_resize_operation(std::string const& code,
    std::string const& expected_str)
{
    HPX_TEST_EQ(compile_and_run(code), compile_and_run(expected_str));
}

///////////////////////////////////////////////////////////////////////////////
int main(int argc, char* argv[])
{
    test_resize_operation(R"(resize_images(
                       [[[[1,  2,  3,  4],[5,  6,  7,  8],[9, 10, 11, 12]],
                       [[-1, -2, -3, -4],[-5, -6, -7, -8], [-9,-10,-11,-12]]]],
                       2, 3,"nearest"))",
        "[[[[  1,   2,   3,   4],[  1,   2,   3,   4],[  1,   2,   3,   4],"
        "[  5,   6,   7,   8],[  5,   6,   7,   8],[  5,   6,   7,   8],"
        "[  9,  10,  11,  12],[  9,  10,  11,  12],[  9,  10,  11,  12]],"
        "[[  1,   2,   3,   4],[  1,   2,   3,   4],[  1,   2,   3,   4],"
        "[  5,   6,   7,   8],[  5,   6,   7,   8],[  5,   6,   7,   8],"
        "[  9,  10,  11,  12],[  9,  10,  11,  12],[  9,  10,  11,  12]],"
        "[[ -1,  -2,  -3,  -4],[ -1,  -2,  -3,  -4],[ -1,  -2,  -3,  -4],"
        "[ -5,  -6,  -7,  -8],[ -5,  -6,  -7,  -8],[ -5,  -6,  -7,  -8],"
        "[ -9, -10, -11, -12],[ -9, -10, -11, -12],[ -9, -10, -11, -12]],"
        "[[ -1,  -2,  -3,  -4],[ -1,  -2,  -3,  -4],[ -1,  -2,  -3,  -4],"
        "[ -5,  -6,  -7,  -8],[ -5,  -6,  -7,  -8],[ -5,  -6,  -7,  -8],"
        "[ -9, -10, -11, -12],[ -9, -10, -11, -12],[ -9, -10, -11, -12]]]]");
    test_resize_operation(R"(resize_images(
                       [[[[1,  2,  3,  4],[5,  6,  7,  8],[9, 10, 11, 12]],
                       [[-1, -2, -3, -4],[-5, -6, -7, -8], [-9,-10,-11,-12]]]],
                       2, 2,"bilinear"))",
        "[[[[  1.,   2.,   3.,   4.], [  3.,   4.,   5.,   6.],"
        "[  5.,   6.,   7.,   8.], [  7.,   8.,   9.,  10.],"
        "[  9.,  10.,  11.,  12.], [  9.,  10.,  11.,  12.]],"
        "[[  0.,   0.,   0.,   0.], [  0.,   0.,   0.,   0.],"
        "[  0.,   0.,   0.,   0.], [  0.,   0.,   0.,   0.],"
        "[  0.,   0.,   0.,   0.], [  0.,   0.,   0.,   0.]],"
        "[[ -1.,  -2.,  -3.,  -4.], [ -3.,  -4.,  -5.,  -6.],"
        "[ -5.,  -6.,  -7.,  -8.], [ -7.,  -8.,  -9., -10.],"
        "[ -9., -10., -11., -12.], [ -9., -10., -11., -12.]],"
        "[[ -1.,  -2.,  -3.,  -4.], [ -3.,  -4.,  -5.,  -6.],"
        "[ -5.,  -6.,  -7.,  -8.], [ -7.,  -8.,  -9., -10.],"
        "[ -9., -10., -11., -12.], [ -9., -10., -11., -12.]]]]");
    test_resize_operation(R"(resize_images(
         [[[[0., 1., 2.], [4., 5., 6.], [8., 9., 10.]],
              [[12., 13., 42.], [16., 17., 18.], [20., 21., 23.]]],
                 [[[0., 1., 20.], [42., 5., 6.], [8., 9., 11.]],
                [[12., 13., 14.], [6., 17., 8.], [20., 21., 23.]]]],
         4, 2,"bilinear"))",
        "[[[[ 0.   ,  1.   ,  2.   ], [ 2.   ,  3.   ,  4.   ],"
        "[ 4.   ,  5.   ,  6.   ], [ 6.   ,  7.   ,  8.   ],"
        "[ 8.   ,  9.   , 10.   ], [ 8.   ,  9.   , 10.   ]],"
        "[[ 3.   ,  4.   , 12.   ], [ 5.   ,  6.   , 10.5  ],"
        "[ 7.   ,  8.   ,  9.   ], [ 9.   , 10.   , 11.125],"
        "[11.   , 12.   , 13.25 ], [11.   , 12.   , 13.25 ]],"
        "[[ 6.   ,  7.   , 22.   ], [ 8.   ,  9.   , 17.   ],"
        "[10.   , 11.   , 12.   ], [12.   , 13.   , 14.25 ],"
        "[14.   , 15.   , 16.5  ], [14.   , 15.   , 16.5  ]],"
        "[[ 9.   , 10.   , 32.   ], [11.   , 12.   , 23.5  ],"
        "[13.   , 14.   , 15.   ], [15.   , 16.   , 17.375],"
        "[17.   , 18.   , 19.75 ], [17.   , 18.   , 19.75 ]],"
        "[[12.   , 13.   , 42.   ], [14.   , 15.   , 30.   ],"
        "[16.   , 17.   , 18.   ], [18.   , 19.   , 20.5  ],"
        "[20.   , 21.   , 23.   ], [20.   , 21.   , 23.   ]],"
        "[[12.   , 13.   , 42.   ], [14.   , 15.   , 30.   ],"
        "[16.   , 17.   , 18.   ], [18.   , 19.   , 20.5  ],"
        "[20.   , 21.   , 23.   ], [20.   , 21.   , 23.   ]],"
        "[[12.   , 13.   , 42.   ], [14.   , 15.   , 30.   ],"
        "[16.   , 17.   , 18.   ], [18.   , 19.   , 20.5  ],"
        "[20.   , 21.   , 23.   ], [20.   , 21.   , 23.   ]],"
        "[[12.   , 13.   , 42.   ], [14.   , 15.   , 30.   ],"
        "[16.   , 17.   , 18.   ], [18.   , 19.   , 20.5  ],"
        "[20.   , 21.   , 23.   ], [20.   , 21.   , 23.   ]]],"
        "[[[ 0.   ,  1.   , 20.   ], [21.   ,  3.   , 13.   ],"
        "[42.   ,  5.   ,  6.   ], [25.   ,  7.   ,  8.5  ],"
        "[ 8.   ,  9.   , 11.   ], [ 8.   ,  9.   , 11.   ]],"
        "[[ 3.   ,  4.   , 18.5  ], [18.   ,  6.   , 12.5  ],"
        "[33.   ,  8.   ,  6.5  ], [22.   , 10.   , 10.25 ],"
        "[11.   , 12.   , 14.   ], [11.   , 12.   , 14.   ]],"
        "[[ 6.   ,  7.   , 17.   ], [15.   ,  9.   , 12.   ],"
        "[24.   , 11.   ,  7.   ], [19.   , 13.   , 12.   ],"
        "[14.   , 15.   , 17.   ], [14.   , 15.   , 17.   ]],"
        "[[ 9.   , 10.   , 15.5  ], [12.   , 12.   , 11.5  ],"
        "[15.   , 14.   ,  7.5  ], [16.   , 16.   , 13.75 ],"
        "[17.   , 18.   , 20.   ], [17.   , 18.   , 20.   ]],"
        "[[12.   , 13.   , 14.   ], [ 9.   , 15.   , 11.   ],"
        "[ 6.   , 17.   ,  8.   ], [13.   , 19.   , 15.5  ],"
        "[20.   , 21.   , 23.   ], [20.   , 21.   , 23.   ]],"
        "[[12.   , 13.   , 14.   ], [ 9.   , 15.   , 11.   ],"
        "[ 6.   , 17.   ,  8.   ], [13.   , 19.   , 15.5  ],"
        "[20.   , 21.   , 23.   ], [20.   , 21.   , 23.   ]],"
        "[[12.   , 13.   , 14.   ], [ 9.   , 15.   , 11.   ],"
        "[ 6.   , 17.   ,  8.   ], [13.   , 19.   , 15.5  ],"
        "[20.   , 21.   , 23.   ], [20.   , 21.   , 23.   ]],"
        "[[12.   , 13.   , 14.   ], [ 9.   , 15.   , 11.   ],"
        "[ 6.   , 17.   ,  8.   ], [13.   , 19.   , 15.5  ],"
        "[20.   , 21.   , 23.   ], [20.   , 21.   , 23.   ]]]]");
    test_resize_operation(R"(resize_images(
         [[[[0., 1., 2., 3.], [4., 5., 6., 7.], [8., 9., 10., 11.]],
         [[12., 13., 42., 15.], [16., 17., 18., 19.], [20., 21., 22., 23.]]],
         [[[0., 1., 20., 3.], [42., 5., 6., 7.], [8., 9., 10., 11.]],
         [[12., 13., 14., 15.], [6., 17., 8., 25.], [20., 21., 22., 23.]]]],
         1, 2,"nearest"))",
        "[[[[ 0.,  1.,  2.,  3.], [ 0.,  1.,  2.,  3.],"
        "[ 4.,  5.,  6.,  7.], [ 4.,  5.,  6.,  7.],"
        "[ 8.,  9., 10., 11.], [ 8.,  9., 10., 11.]],"
        "[[12., 13., 42., 15.], [12., 13., 42., 15.],"
        "[16., 17., 18., 19.], [16., 17., 18., 19.],"
        "[20., 21., 22., 23.], [20., 21., 22., 23.]]],"
        "[[[ 0.,  1., 20.,  3.], [ 0.,  1., 20.,  3.],"
        "[42.,  5.,  6.,  7.], [42.,  5.,  6.,  7.],"
        "[ 8.,  9., 10., 11.], [ 8.,  9., 10., 11.]],"
        "[[12., 13., 14., 15.], [12., 13., 14., 15.],"
        "[ 6., 17.,  8., 25.], [ 6., 17.,  8., 25.],"
        "[20., 21., 22., 23.], [20., 21., 22., 23.]]]]");

    return hpx::util::report_errors();
}
