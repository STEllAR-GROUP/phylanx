// Copyright (c) 2019 Bita Hasheminezhad
// Copyright (c) 2019 Hartmut Kaiser
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#include <phylanx/phylanx.hpp>

#include <hpx/hpx_main.hpp>
#include <hpx/include/lcos.hpp>
#include <hpx/testing.hpp>

#include <string>
#include <utility>

phylanx::execution_tree::primitive_argument_type compile_and_run(
    std::string const& codestr)
{
    phylanx::execution_tree::compiler::function_list snippets;
    phylanx::execution_tree::compiler::environment env =
        phylanx::execution_tree::compiler::default_environment();

    auto const& code = phylanx::execution_tree::compile(codestr, snippets, env);
    return code.run();
}

///////////////////////////////////////////////////////////////////////////////
void test_conv2d_operation(std::string const& code,
    std::string const& expected_str)
{
    HPX_TEST_EQ(compile_and_run(code), compile_and_run(expected_str));
}

///////////////////////////////////////////////////////////////////////////////
int main(int argc, char* argv[])
{
    test_conv2d_operation("conv2d([[[[ 1,  2],[ 3,  4]],[[ 5,  6],[ 7,  8]],"
                          "[[ 9, 10],[11, 12]]],[[[13, 14],[15, 16]],"
                          "[[17, 18],[19, 20]],[[21, 22],[23, 24]]]],"
                          "[[[[ 1,  2,  0,  1], [ 1,  -1,  0,  0]],"
                          "[[1, 1, -1, 1], [0, 1, 1, 1]]],"
                          "[[[0,-1,-3,-1], [0,-1,-1,-13]],"
                          "[[0, 2, 42, 2], [1, 2, 2, 0]]]])",
        "[[[[  14.,   26.,  290.,  -61.]],[[  30.,   46.,  450.,  -97.]]],"
        "[[[  62.,   86.,  770., -169.]],[[  78.,  106.,  930., -205.]]]]");
    test_conv2d_operation(R"(conv2d([[[[ 1,  2],[ 3,  4]],[[ 5,  6],[ 7,  8]],
                          [[ 9, 10],[11, 12]]],[[[13, 14],[15, 16]],
                          [[17, 18],[19, 20]],[[21, 22],[23, 24]]]],
                          [[[[ 1,  2,  0,  1],[ 0,  -1,  0,  0]]],
                          [[[-13, -1,  0, -42],[-2, -33, 4, -1]]]],"same"))",
        "[[[[ -76., -203.,   24., -215.],[-104., -269.,   32., -299.]],"
        "[[-132., -335.,   40., -383.],[-160., -401.,   48., -467.]],"
        "[[   9.,    8.,    0.,    9.],[  11.,   10.,    0.,   11.]]],"
        "[[[-244., -599.,   72., -719.],[-272., -665.,   80., -803.]],"
        "[[-300., -731.,   88., -887.],[-328., -797.,   96., -971.]],"
        "[[  21.,   20.,    0.,   21.],[  23.,   22.,    0.,   23.]]]]");
    test_conv2d_operation(R"(conv2d([[[[ 1,  2],[ 3,  4]],[[ 5,  6],[ 7,  8]],
                          [[ 9, 10],[11, 12]]],[[[13, 14],[15, 16]],
                          [[17, 18],[19, 20]],[[21, 22],[23, 24]]]],
                          [[[[ 1,  2,  0,  1],[ 1,  -1,  0,  0]],
                          [[1, 1, -1, 1],[0, 1, 1, 1]]],
                          [[[0,-1,-3, -1],[0,-1,-1,-13]],
                          [[0, 2, 42, 2],[1, 2, 2, 0]]]],
                          "valid", list(2, 3)))",
        "[[[[  14.,   26.,  290.,  -61.]]], [[[  62.,   86.,  770., -169.]]]]");
    test_conv2d_operation(R"(conv2d([[[[ 1,  2],[ 3,  4]],[[ 5,  6],[ 7,  8]],
                          [[ 9, 10],[11, 12]]],[[[13, 14],[15, 16]],
                          [[17, 18],[19, 20]],[[21, 22],[23, 24]]]],
                          [[[[ 1,  2,  0,  1],[ 0,  -1,  0,  0]]],
                          [[[-13, -1,  0, -42],[-2, -33, 4, -1]]]],
                          "same", list(1, 3)))",
        "[[[[ -76., -203.,   24., -215.]],[[-132., -335.,   40., -383.]],"
        "[[   9.,    8.,    0.,    9.]]],[[[-244., -599.,   72., -719.]],"
        "[[-300., -731.,   88., -887.]],[[  21.,   20.,    0.,   21.]]]]");
    test_conv2d_operation(R"(conv2d([[[[ 1,  2],[ 3,  4]],[[ 5,  6],[ 7,  8]],
                          [[ 9, 10],[11, 12]]],[[[13, 14],[15, 16]],
                          [[17, 18],[19, 20]],[[21, 22],[23, 24]]]],
                          [[[[ 1,  2,  0,  1],[ 0,  -1,  0,  0]]],
                          [[[-13, -1,  0, -4],[-2, -33, 42, -1]]]],
                          "same", list(2, 2)))",
        "[[[[ -76., -203.,  252.,  -25.]],[[   9.,    8.,    0.,    9.]]],"
        "[[[-244., -599.,  756.,  -73.]],[[  21.,   20.,    0.,   21.]]]]");
    test_conv2d_operation(R"(conv2d([[[[ 1,  2],[ 3,  4]],[[ 5,  6],[ 7,  8]],
                          [[ 9, 10],[11, 12]]],[[[13, 14],[15, 16]],
                          [[17, 18],[19, 20]],[[21, 22],[23, 24]]]],
                          [[[[ 1,  2,  0,  1],[ 1,  -1,  0,  0]],
                          [[1, 1, -1, 1],[0, 1, 1, 1]]],
                          [[[0,-1,-3, -1],[0,-1,-1,-13]],
                          [[0, 2, 42, 2],[1, 2, 2, 0]]]],
                          "valid", list(1, 1), list(2, 1)))",
        "[[[[  18.,   34.,  450., -109.]]],[[[  66.,   94.,  930., -217.]]]]");
    test_conv2d_operation(R"(conv2d([[[[ 1,  2],[ 3,  4]],[[ 5,  6],[ 7,  8]],
                          [[ 9, 10],[11, 12]]],[[[13, 14],[15, 16]],
                          [[17, 18],[19, 20]],[[21, 22],[23, 24]]]],
                          [[[[ 1,  2,  0,  1],[ 1,  -1,  0,  0]],
                          [[1, 1, -1, 1],[0, 1, 1, 1]]],
                          [[[0,-1,-3, -1],[0,-1,-1,-13]],
                          [[0, 2, 42, 2],[1, 2, 2, 0]]]],
                          "same", list(1, 1), list(2, 3)))",
        "[[[[   0.,    0.,    0.,    0.],[   0.,  -11.,  -21.,  -83.]],"
        "[[   0.,    0.,    0.,    0.],[   3.,  -19.,  -37., -138.]],"
        "[[   0.,    0.,    0.,    0.],[  11.,    4.,    0.,    5.]]],"
        "[[[   0.,    0.,    0.,    0.],[   0.,  -35.,  -69., -251.]],"
        "[[   0.,    0.,    0.,    0.],[  27.,  -31.,  -85., -294.]],"
        "[[   0.,    0.,    0.,    0.],[  35.,   16.,    0.,   17.]]]]");

    return hpx::util::report_errors();
}
