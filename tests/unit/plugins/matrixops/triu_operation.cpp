// Copyright (c) 2021 Karame M. Shokooh
// Copyright (c) 2021 Hartmut Kaiser
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying)
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#include <phylanx/phylanx.hpp>

#include <hpx/hpx_main.hpp>
#include <hpx/modules/testing.hpp>
#include <cstdint>
#include <string>
#include <utility>

///////////////////////////////////////////////////////////////////////////////
phylanx::execution_tree::primitive_argument_type compile_and_run(
    std::string const& codestr)
{
    phylanx::execution_tree::compiler::function_list snippets;
    phylanx::execution_tree::compiler::environment env =
        phylanx::execution_tree::compiler::default_environment();

    auto const& code = phylanx::execution_tree::compile(codestr, snippets, env);
    return code.run().arg_;
}

///////////////////////////////////////////////////////////////////////////////
void test_triu_operation(std::string const& code,
    std::string const& expected_str)
{
    HPX_TEST_EQ(compile_and_run(code), compile_and_run(expected_str));
}

///////////////////////////////////////////////////////////////////////////////
int main(int argc, char* argv[])
{
    // triu 2d
    test_triu_operation("triu([[13, 42, 33], [101, 12, 65]])",
        "[[13, 42, 33], [0, 12, 65]]");
    test_triu_operation("triu([[13, 42, 33],[101, 12, 65],[50, 60, 70],[21, 22, 23]])",
        "[[13, 42, 33],[0, 12, 65],[0,  0, 70],[0,  0,  0]]");
    test_triu_operation("triu([[13, 42, 33],[101, 12, 65],[50, 60, 70],[21, 22, 23]],-3)",
        "[[13, 42, 33],[101, 12, 65],[50, 60, 70],[21, 22, 23]]");
    test_triu_operation("triu([[14, 20, 87],[10, 1, 25],[45, 79, 91],[24, 22, 31]], 2)",
        "[[0, 0, 87], [0, 0, 0], [0, 0,  0], [0, 0, 0]]");
    test_triu_operation("triu([[14, 20, 87],[10, 1, 25],[45, 79, 91],[24, 22, 31]], 3)",
        "[[0, 0, 0], [0, 0, 0], [0, 0,  0], [0, 0, 0]]");
    test_triu_operation("triu([[13, 42, 33],[101, 12, 65]], 1)",
        "[[0, 42, 33],[0, 0, 65]]");
    test_triu_operation("triu([[13, 42, 33],[101, 12, 65]], -2)",
        "[[13, 42, 33],[101, 12, 65]]");
    
    // triu 3d
    test_triu_operation("triu([[[69, 65, 50],[111, 102, 85]],[[30, 42, 31],[1, 26, 55]]] +0)",
         "[[[69, 65, 50], [0, 102, 85]], [[30, 42, 31], [0, 26, 55]]]");
    test_triu_operation("triu([[[87, 60, 12],[101, 72, 62],[21, 64, 56]],"
                        "[[45, 8, 12],[18, 99, 154],[10,32,98]]] +0, 3)",
        "[[[0, 0, 0],[0, 0, 0],[0, 0, 0]],[[0, 0, 0],[0, 0, 0],[0, 0, 0]]]");
    test_triu_operation("triu([[[87, 60, 12],[101, 72, 62],[21, 64, 56]],"
                        "[[45, 8, 12],[18, 99, 154],[10,32,98]]] +0, 2)",
        "[[[0, 0, 12],[0, 0, 0],[0, 0, 0]],[[0, 0, 12],[0, 0, 0],[0, 0, 0]]]");
    test_triu_operation("triu([[[87, 60, 12],[101, 72, 62],[21, 64, 56]],"
                        "[[45, 8, 12],[18, 99, 154],[10,32,98]]] +0, -2)",
        "[[[ 87,  60,  12],[101,  72,  62],[ 21,  64,  56]],[[ 45,   8,  12], "
        "[ 18,  99, 154],[ 10,  32,  98]]]");
    test_triu_operation("triu([[[87, 60, 12],[101, 72, 62],[21, 64, 56]],"
                        "[[45, 8, 12],[18, 99, 154],[10,32,98]]] +0, -1)",
        "[[[ 87,  60,  12],[101, 72, 62],[ 0,  64,  56]],[[ 45, 8,  12],"
        "[18, 99, 154],[ 0, 32, 98]]]");
    test_triu_operation(
        "triu([[[69, 65, 50],[111, 102, 85]],[[30, 42, 31],[1, 26, 55]]])",
        "[[[69, 65, 50],[0, 102, 85]],[[30, 42, 31],[0, 26, 55]]]");
    test_triu_operation("triu([[[87, 60, 12],[101, 72, 62],[21, 64, 56]], "
                        "[[45, 8, 12],[18, 99, 154],[10,32,98]]], 3)",
        "[[[0, 0, 0],[0, 0, 0],[0, 0, 0]],[[0, 0, 0],[0, 0, 0],[0, 0, 0]]]");
    test_triu_operation("triu([[[87, 60, 12],[101, 72, 62],[21, 64, 56]],"
                        "[[45, 8, 12],[18, 99, 154],[10,32,98]]], 2)",
        "[[[0, 0, 12],[0, 0, 0],[0, 0, 0]],[[0, 0, 12],[0, 0, 0],[0, 0, 0]]]");
    test_triu_operation("triu([[[87, 60, 12],[101, 72, 62],[21, 64, 56]], "
                        "[[45, 8, 12],[18, 99, 154],[10,32,98]]], -2)",
        "[[[ 87,  60,  12],[101,  72,  62],[ 21,  64,  56]],[[ 45,   8,  12], "
        "[ 18,  99, 154],[ 10,  32,  98]]]");
    test_triu_operation("triu([[[87, 60, 12],[101, 72, 62],[21, 64, 56]],"
                        "[[45, 8, 12],[18, 99, 154],[10,32,98]]], -1)",
        "[[[ 87,  60,  12],[101, 72, 62],[ 0,  64,  56]],[[ 45, 8,  12],"
        "[ 18, 99, 154],[ 0, 32, 98]]]");

    ///////////////////////////////////////////////////////////////////////////
    // tril 2d
    test_triu_operation("tril([[14, 20, 87],[10, 1, 25],[45, 79, 91],[24, 22, 31]])",
        "[[14,  0,  0],[10,  1,  0],[45, 79, 91],[24, 22, 31]]");
    test_triu_operation("tril([[14, 20, 87],[10, 1, 25],[45, 79, 91],[24, 22, 31]], 1)",
        "[[14, 20,  0],[10,  1, 25],[45, 79, 91],[24, 22, 31]]");
    test_triu_operation("tril([[14, 20, 87],[10, 1, 25],[45, 79, 91],[24, 22, 31]], 2)",
        "[[14, 20, 87],[10, 1, 25],[45, 79, 91],[24, 22, 31]]");
    test_triu_operation("tril([[14, 20, 87],[10, 1, 25],[45, 79, 91],[24, 22, 31]], -2)",
        "[[ 0,  0,  0],[ 0,  0,  0],[45,  0,  0],[24, 22,  0]]");
    test_triu_operation("tril([[14, 20, 87],[10, 1, 25],[45, 79, 91],[24, 22, 31]], -4)",
        "[[0, 0, 0],[0, 0, 0],[0, 0, 0],[0, 0, 0]]");
         
    // tril 3d
    test_triu_operation("tril([[[96, 61, 7],[42, 34, 90]],[[52, 82, 38],"
                        "[21, 9, 123]],[[201, 4, 87],[25, 87,99]]])",
        "[[[ 96,   0,   0],[ 42,  34,   0]],[[ 52,  0,  0],"
        "[ 21,   9,   0]],[[201,  0,  0],[ 25,  87, 0]]]");
    test_triu_operation("tril([[[96, 61, 7],[42, 34, 90]],[[52, 82, 38],"
                        "[21, 9, 123]],[[201, 4, 87],[25, 87,99]]], 2)",
        "[[[ 96,  61,   7],[ 42,  34,  90]],[[ 52,  82,  38],"
        "[ 21,   9, 123]],[[201,   4,  87],[ 25,  87,  99]]]");
    test_triu_operation("tril([[[96, 61, 7],[42, 34, 90]],[[52, 82, 38],"
                        "[21, 9, 123]],[[201, 4, 87],[25, 87,99]]], -1)",
        "[[[ 0,  0,  0],[42,  0,  0]],[[ 0,  0,  0],"
        "[21,  0,  0]],[[ 0,  0,  0],[25,  0,  0]]]");
    test_triu_operation("tril([[[96, 61, 7],[42, 34, 90]],[[52, 82, 38],"
                        "[21, 9, 123]],[[201, 4, 87],[25, 87,99]]], -2)",
        "[[[ 0,  0,  0],[0,  0,  0]],[[ 0,  0,  0],"
        "[0,  0,  0]],[[ 0,  0,  0],[0,  0,  0]]]");
    test_triu_operation(
        "tril([[[96, 61, 7, 5],[42, 34, 90, 15],[20, 54, 101, 99]],"
        "[[52, 82, 38, 2],[21, 9, 123, 78],[15, 65, 8, 1]],"
        "[[201, 4, 87, 65],[25, 87,99, 30],[21, 2, 211, 60]]], 3)",
        "[[[ 96,  61,   7,   5],[ 42,  34,  90,  15],[ 20,  54, 101,  99]],"
        "[[ 52,  82,  38,   2],[ 21,   9, 123,  78],[ 15,  65,   8,   1]],"
        "[[201,   4,  87,  65],[ 25,  87,  99,  30],[ 21,   2, 211,  60]]]");
    test_triu_operation(
        "tril([[[96, 61, 7, 5],[42, 34, 90, 15],[20, 54, 101, 99]],"
        "[[52, 82, 38, 2],[21, 9, 123, 78],[15, 65, 8, 1]],"
        "[[201, 4, 87, 65],[25, 87,99, 30],[21, 2, 211, 60]]], 4)",
        "[[[ 96,  61,   7,   5],[ 42,  34,  90,  15],[ 20,  54, 101,  99]],"
        "[[ 52,  82,  38,   2],[ 21,   9, 123,  78],[ 15,  65,   8,   1]],"
        "[[201,   4,  87,  65],[ 25,  87,  99,  30],[ 21,   2, 211,  60]]]");
    test_triu_operation(
        "tril([[[96, 61, 7, 5],[42, 34, 90, 15],[20, 54, 101, 99]],"
        "[[52, 82, 38, 2],[21, 9, 123, 78],[15, 65, 8, 1]],"
        "[[201, 4, 87, 65],[25, 87,99, 30],[21, 2, 211, 60]]], 2)",
        "[[[ 96,  61,   7,   0],[ 42,  34,  90,  15],[ 20,  54, 101,  99]],"
        "[[ 52,  82,  38,   0],[ 21,   9, 123,  78],[ 15,  65,   8,   1]],"
        "[[201,   4,  87,  0],[ 25,  87,  99,  30],[ 21,   2, 211,  60]]]");
    test_triu_operation(
        "tril([[[96, 61, 7, 5],[42, 34, 90, 15],[20, 54, 101, 99]],"
        "[[52, 82, 38, 2],[21, 9, 123, 78],[15, 65, 8, 1]],"
        "[[201, 4, 87, 65],[25, 87,99, 30],[21, 2, 211, 60]]] )",
        "[[[ 96,   0,   0,   0],[ 42,  34,   0,   0],[ 20,  54, 101,   0]],"
        "[[ 52,   0,   0,   0],[ 21,   9,   0,   0],[ 15,  65,   8,   0]],"
        "[[201,   0,   0,   0],[ 25,  87,   0,   0],[ 21,   2, 211,   0]]]");
    test_triu_operation(
        "tril([[[96, 61, 7, 5],[42, 34, 90, 15],[20, 54, 101, 99]],"
        "[[52, 82, 38, 2],[21, 9, 123, 78],[15, 65, 8, 1]],"
        "[[201, 4, 87, 65],[25, 87,99, 30],[21, 2, 211, 60]]], -3)",
        "[[[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0]],"
        "[[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0]],"
        "[[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0]]]");
    test_triu_operation(
        "tril([[[96, 61, 7, 5],[42, 34, 90, 15],[20, 54, 101, 99]],"
        "[[52, 82, 38, 2],[21, 9, 123, 78],[15, 65, 8, 1]],"
        "[[201, 4, 87, 65],[25, 87,99, 30],[21, 2, 211, 60]]], -4)",
        "[[[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0]],"
        "[[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0]],"
        "[[0, 0, 0, 0],[0, 0, 0, 0],[0, 0, 0, 0]]]");
    test_triu_operation(
        "tril([[[96, 61, 7, 5],[42, 34, 90, 15],[20, 54, 101, 99]],"
        "[[52, 82, 38, 2],[21, 9, 123, 78],[15, 65, 8, 1]],"
        "[[201, 4, 87, 65],[25, 87,99, 30],[21, 2, 211, 60]]], -2)",
        "[[[0, 0, 0, 0],[0, 0, 0, 0],[20, 0, 0, 0]],"
        "[[0, 0, 0, 0],[0, 0, 0, 0],[15, 0, 0, 0]],"
        "[[0, 0, 0, 0],[0, 0, 0, 0],[21, 0, 0, 0]]]");

    hpx::finalize();
    return hpx::util::report_errors();
}
