# Copyright (c) 2017 R. Tohid
# Copyright (c) 2018 Parsa Amini
# Copyright (c) 2018 Thomas Heller
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

################################################################################
# ## Verifying the config.yml file
# On this page https://circleci.com/docs/2.0/local-cli/, a tool is introduced
# that checks your config file.
# e.g.
# ```bash
# $ curl -o circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci
# $ chmod +x circleci
# $ ./circleci config validate --config=repo/.circleci/config.yml
#
#  config file is valid
# ```
# ## Manually triggering a build
# A build is triggered upon every commit to GitHub. Failed builds can be
# rebuilt using the web interface. If a new commit did not trigger an automatic
# build you can use the CircleCI API to manually do so.
#
# e.g.
# ```bash
# $ curl -X POST https://circleci.com/api/v1.1/project/github/stellar-group/phylanx/tree/cool-branch?circle-token=$CIRCLE_TOKEN
# ```
# For more information about using the CircleCI API consult the [API
# reference](https://circleci.com/docs/api/v1-reference/#version-control-system-vcs-type)
#
# API tokens can be generated at: https://circleci.com/account/api
#
# ## Most useful CircleCI environment variables
# * `CIRCLECI`: Is available and set to `true` if you are on CircleCI
# * `CIRCLE_BRANCH`: The name of the current branch. e.g. `master`
# * `CIRCLE_SHA1`: Git commit changeset
# * `CIRCLE_WORKING_DIRECTORY`: Default working directory. Probably set to  `~/project`
#
# ## References
# * CircleCI environment variables: https://circleci.com/docs/2.0/env-vars/
# * API reference: https://circleci.com/docs/api/v1-reference/
# * Configuration reference: https://circleci.com/docs/2.0/configuration-reference/

################################################################################
version: 2
anchors:
    - &docker_config
        docker:
            - image: stellargroup/phylanx_base:prerequisites
              entrypoint: /bin/bash

    - &ignore_docs
        filters:
            branches:
                ignore:
                    - gh-pages

    - &docs_push_branch_filter
        filters:
            branches:
                only:
                    - master

    - &convert_xml
        run:
            name: Converting XML
            when: always
            command: |
                mkdir -p ${CIRCLE_JOB}
                xsltproc /phylanx/conv.xsl Testing/$(head -n 1 < Testing/TAG)/Test.xml >${CIRCLE_JOB}/Test.xml

    - &attach_phylanx_tree
        attach_workspace:
            at: /

    - &avoid_cmake_rerun
        run:
            name: Avoid re-running CMake
            command: |
                export old_targets=$( \
                    ninja -n -d explain 2>&1 | \
                    grep -o 'output\ [^ ]\+ older\ than\ most\ recent\ input [^ ]\+' | \
                    awk '{ print $2 }' || true)
                if [[ -n "$old_targets" ]]; then
                    echo "$old_targets"| xargs -I % touch %
                fi
            working_directory: /phylanx/build
    - &justify_building_all
        run:
            name: Justify building the ALL target
            command: ninja -n -d explain || true
            working_directory: /phylanx/build

################################################################################
jobs:
    configure:
        <<: *docker_config
        working_directory: /phylanx
        steps:
            - checkout:
                path:
                    /phylanx/src-full
            - run:
                name: Create a shallow clone
                command: git clone --depth=1 file:///phylanx/src-full src
            - run:
                name: CMake Version
                command: cmake --version
            - run:
                name: Download CTest XML to JUnit XML transformation stylesheet
                command: curl https://raw.githubusercontent.com/Kitware/CDash/master/tests/circle/conv.xsl -o conv.xsl
            # Install blaze_tensors library
            - run:
                name: Install blaze_tensor
                command: |
                    git clone https://github.com/STEllAR-GROUP/blaze_tensor.git --depth=1 /blaze_tensor
                    cmake -H/blaze_tensor -B/blaze_tensor/build
                    cmake --build /blaze_tensor/build --target install
            # Configure Phylanx
            - run:
                name: Run CMake
                command: |
                    cmake                                           \
                        -Hsrc                                       \
                        -Bbuild                                     \
                        -GNinja                                     \
                        -DCMAKE_BUILD_TYPE=Debug                    \
                        -DCMAKE_CXX_COMPILER=clang++                \
                        -DCMAKE_C_COMPILER=clang                    \
                        -Dblaze_DIR=/blaze/share/blaze/cmake        \
                        -DHPX_DIR=/usr/local/lib/cmake/HPX          \
                        -DPHYLANX_WITH_GIT_COMMIT=${CIRCLE_SHA1}    \
                        -DPHYLANX_WITH_GIT_BRANCH="${CIRCLE_BRANCH}"\
                        -DPHYLANX_WITH_GIT_TAG="${CIRCLE_TAG}"      \
                        -DPHYLANX_WITH_TOOLS=On                     \
                        -DPHYLANX_WITH_BLAZE_TENSOR=ON              \
                        -DPHYLANX_WITH_ITERATIVE_SOLVERS=ON         \
                        -DPHYLANX_WITH_DOCUMENTATION=On             \
                        -DPHYLANX_WITH_HIGHFIVE=On                  \
                        -DPHYLANX_WITH_CXX14=On
            - persist_to_workspace:
                root: /
                paths:
                    - phylanx/build
                    - phylanx/src
                    - phylanx/conv.xsl
                    - usr/local/include/blaze_tensor
                    - usr/local/share/BlazeTensor
    check.test_coverage:
        <<: *docker_config
        working_directory: /phylanx/src
        steps:
            - <<: *attach_phylanx_tree
            # Test coverage
            - run:
                name: Ensure all CTest tests are run
                command: |
                    tools/circleci/check_test_coverage.py \
                        .circleci/config.yml \
                        <(cd /phylanx/build && ctest -N | grep -o 'tests[^ ]\+')
    build:
        <<: *docker_config
        working_directory: /phylanx/build
        steps:
            - <<: *attach_phylanx_tree
            # Build all targets
            - run:
                name: Build all targets
                command: cmake --build . -- -j1
            # CTest to JUnit XML transformation sheet
            - persist_to_workspace:
                root: /
                paths:
                    - phylanx/build
    docs_push:
        <<: *docker_config
        working_directory: /phylanx/build
        steps:
            - <<: *attach_phylanx_tree
            # Build Documentation and Push to gh-pages branch
            - <<: *avoid_cmake_rerun
            - <<: *justify_building_all
            - run:
                name: Justify build
                command: ninja -n -d explain git_docs
            - run:
                name: Add Github's key(s) to known_hosts
                command: |
                    mkdir -p ~/.ssh
                    ssh-keyscan -H github.com >>~/.ssh/known_hosts
            - run:
                name: Configure local Git
                command: |
                    git config --global user.name "StellarBot"
                    git config --global user.email "stellar@cct.lsu.edu"
            - run:
                name: Build and push Sphinx Documentation
                command: cmake --build . -- -j1 git_docs
            - persist_to_workspace:
                  root: /
                  paths:
                      - phylanx/build

    check.code_format.inspect:
        <<: *docker_config
        working_directory: /phylanx/src
        steps:
            - <<: *attach_phylanx_tree
            - run:
                name: Create build, test, and artifacts directories
                command: mkdir -p /artifacts /code_format
            - run:
                name: Justify build
                command: ninja -n -d explain tools.inspect
                working_directory: /phylanx/build
                when: always
            - run:
                name: Build the Inspect tool
                working_directory: /phylanx/build
                command: cmake --build . -- -j1 tools.inspect
                when: always
            - run:
                name: Check the formatting of Phylanx's C++ files
                command: |
                    /phylanx/build/bin/inspect \
                        --all \
                        --output=/artifacts/phylanx_inspect_report.html \
                        /phylanx/src
                when: always
            - run:
                name: Convert inspect HTML output to XML
                command: |
                    tools/inspect/inspect_to_junit.py \
                        /artifacts/phylanx_inspect_report.html \
                        >/code_format/phylanx_inspect.xml
                when: always
            # Code Formatting Check Reports
            - store_artifacts:
                path: /artifacts
            # Code Format Check JUnit Reports
            - store_test_results:
                path: /code_format

    check.code_format.flake8:
        <<: *docker_config
        working_directory: /phylanx/src
        steps:
            - <<: *attach_phylanx_tree
            - run:
                name: Create build, test, and artifacts directories
                command: mkdir -p /artifacts /code_format
            - run:
                name: Check the formatting of Phylanx's Python files
                command: |
                    flake8 \
                        --config=tools/flake8/config.ini \
                        --tee \
                        --output-file=/artifacts/phylanx_flake8_report.txt \
                        .
            - run:
                name: Converting flake8 text output to XML
                command: |
                    tools/flake8/flake_to_junit.py \
                        /artifacts/phylanx_flake8_report.txt \
                        /code_format/phylanx_flake8.xml
                when: always
            # Code Formatting Check Reports
            - store_artifacts:
                path: /artifacts
            # Code Format Check JUnit Reports
            - store_test_results:
                path: /code_format

    check.help_format:
        <<: *docker_config
        working_directory: /phylanx/src
        steps:
            - <<: *attach_phylanx_tree
            - run:
                name: Create build, test, and artifacts directories
                command: mkdir -p /artifacts /code_format
            # Run the code
            - run:
                name: Check the formatting of Phylanx's Python files
                environment:
                    PYTHONPATH: "/phylanx/build/python/build/lib.linux-x86_64-3.6"
                command: |
                    python3 tools/check_help/check_help.py >/code_format/phylanx_help_report.xml
                    cp /code_format/phylanx_help_report.xml /artifacts/phylanx_help_report.txt
            - store_artifacts:
                path: /artifacts
            # Code Format Check JUnit Reports
            - store_test_results:
                path: /code_format
    # ## Test Jobs
    # Number of test jobs and tests that are assigned to each job are chosen
    # based on previous build and execution times.
    tests.regressions:
        <<: *docker_config
        working_directory: /phylanx/build
        steps:
            - <<: *attach_phylanx_tree
            - <<: *avoid_cmake_rerun
            - <<: *justify_building_all
            - run:
                name: Justify build
                command: ninja -n -d explain tests.regressions
            - run:
                name: Build regression tests
                command: cmake --build . -- -j1 tests.regressions
            - run:
                name: Run regression tests
                command: ctest -T test --no-compress-output --output-on-failure -R tests.regressions
            - <<: *convert_xml
            - store_test_results:
                path: tests.regressions
            - store_artifacts:
                path: tests.regressions
    tests.unit.distributed:
        <<: *docker_config
        working_directory: /phylanx/build
        steps:
            - <<: *attach_phylanx_tree
            - <<: *avoid_cmake_rerun
            - <<: *justify_building_all
            - run:
                name: Justify build
                command: ninja -n -d explain tests.unit.distributed
            - run:
                name: Build distributed tests
                command: cmake --build . -- -j1 tests.unit.distributed
            - run:
                name: Run distributed tests
                command: ctest -T test --no-compress-output --output-on-failure -R tests.unit.distributed
            - <<: *convert_xml
            - store_test_results:
                path: tests.distributed
            - store_artifacts:
                path: tests.distributed
    tests.unit.plugins.arithmetics:
        <<: *docker_config
        working_directory: /phylanx/build
        steps:
            - <<: *attach_phylanx_tree
            - <<: *avoid_cmake_rerun
            - <<: *justify_building_all
            - run:
                name: Justify build
                command: ninja -n -d explain tests.unit.plugins.arithmetics
            - run:
                name: Build arithmetics primitive plugin unit tests
                command: cmake --build . -- -j1 tests.unit.plugins.arithmetics
            - run:
                name: Run arithmetics primitive plugin unit tests
                command: ctest -T test --no-compress-output --output-on-failure -R tests.unit.plugins.arithmetics
            - <<: *convert_xml
            - store_test_results:
                path: tests.unit.plugins.arithmetics
            - store_artifacts:
                path: tests.unit.plugins.arithmetics
    tests.unit.plugins.booleans:
        <<: *docker_config
        working_directory: /phylanx/build
        steps:
            - <<: *attach_phylanx_tree
            - <<: *avoid_cmake_rerun
            - <<: *justify_building_all
            - run:
                name: Justify build
                command: ninja -n -d explain tests.unit.plugins.booleans
            - run:
                name: Build boolean primitive plugin unit tests
                command: cmake --build . -- -j1 tests.unit.plugins.booleans
            - run:
                name: Run boolean primitive plugin unit tests
                command: ctest -T test --no-compress-output --output-on-failure -R tests.unit.plugins.booleans
            - <<: *convert_xml
            - store_test_results:
                path: tests.unit.plugins.booleans
            - store_artifacts:
                path: tests.unit.plugins.booleans
    tests.unit.plugins.controls:
        <<: *docker_config
        working_directory: /phylanx/build
        steps:
            - <<: *attach_phylanx_tree
            - <<: *avoid_cmake_rerun
            - <<: *justify_building_all
            - run:
                name: Justify build
                command: ninja -n -d explain tests.unit.plugins.controls
            - run:
                name: Build control primitive plugin unit tests
                command: cmake --build . -- -j1 tests.unit.plugins.controls
            - run:
                name: Run control primitive plugin unit tests
                command: ctest -T test --no-compress-output --output-on-failure -R tests.unit.plugins.controls
            - <<: *convert_xml
            - store_test_results:
                path: tests.unit.plugins.controls
            - store_artifacts:
                path: tests.unit.plugins.controls
    tests.unit.plugins.fileio_solvers:
        <<: *docker_config
        working_directory: /phylanx/build
        steps:
            - <<: *attach_phylanx_tree
            - <<: *avoid_cmake_rerun
            - <<: *justify_building_all
            - run:
                name: Justify build
                command: ninja -n -d explain tests.unit.plugins.{fileio,solvers}
            - run:
                name: Build file I/O and solvers primitive plugin unit tests
                command: cmake --build . -- -j1 tests.unit.plugins.{fileio,solvers}
            - run:
                name: Run file I/O and solvers primitive plugin unit tests
                command: ctest -T test --no-compress-output --output-on-failure -R 'tests.unit.plugins.(fileio|solvers)'
            - <<: *convert_xml
            - store_test_results:
                path: tests.unit.plugins.fileio_solvers
            - store_artifacts:
                path: tests.unit.plugins.fileio_solvers
    tests.unit.plugins.keras_support:
        <<: *docker_config
        working_directory: /phylanx/build
        steps:
            - <<: *attach_phylanx_tree
            - <<: *avoid_cmake_rerun
            - <<: *justify_building_all
            - run:
                name: Justify build
                command: ninja -n -d explain tests.unit.plugins.keras_support
            - run:
                name: Build KerasSupport primitive plugin unit tests
                command: cmake --build . -- -j1 tests.unit.plugins.keras_support
            - run:
                name: Run KerasSupport primitive plugin unit tests
                command: ctest -T test --no-compress-output --output-on-failure -R tests.unit.plugins.keras_support
            - <<: *convert_xml
            - store_test_results:
                path: tests.unit.plugins.keras_support
            - store_artifacts:
                path: tests.unit.plugins.keras_support
    tests.unit.plugins.listops:
        <<: *docker_config
        working_directory: /phylanx/build
        steps:
            - <<: *attach_phylanx_tree
            - <<: *avoid_cmake_rerun
            - <<: *justify_building_all
            - run:
                name: Justify build
                command: ninja -n -d explain tests.unit.plugins.listops
            - run:
                name: Build ListOps primitive plugin unit tests
                command: cmake --build . -- -j1 tests.unit.plugins.listops
            - run:
                name: Run ListOps primitive plugin unit tests
                command: ctest -T test --no-compress-output --output-on-failure -R tests.unit.plugins.listops
            - <<: *convert_xml
            - store_test_results:
                path: tests.unit.plugins.listops
            - store_artifacts:
                path: tests.unit.plugins.listops
    tests.unit.plugins.matrixops:
        <<: *docker_config
        working_directory: /phylanx/build
        steps:
            - <<: *attach_phylanx_tree
            - <<: *avoid_cmake_rerun
            - <<: *justify_building_all
            - run:
                name: Justify build
                command: ninja -n -d explain tests.unit.plugins.matrixops
            - run:
                name: Build MatrixOps primitive plugin unit tests
                command: cmake --build . -- -j1 tests.unit.plugins.matrixops
            - run:
                name: Run MatrixOps primitive plugin unit tests
                command: ctest -T test --no-compress-output --output-on-failure -R tests.unit.plugins.matrixops
            - <<: *convert_xml
            - store_test_results:
                path: tests.unit.plugins.matrixops
            - store_artifacts:
                path: tests.unit.plugins.matrixops
    tests.unit.plugins.statistics:
        <<: *docker_config
        working_directory: /phylanx/build
        steps:
            - <<: *attach_phylanx_tree
            - <<: *avoid_cmake_rerun
            - <<: *justify_building_all
            - run:
                name: Justify build
                command: ninja -n -d explain tests.unit.plugins.statistics
            - run:
                name: Build statistics primitive plugin unit tests
                command: cmake --build . -- -j1 tests.unit.plugins.statistics
            - run:
                name: Run statistics primitive plugin unit tests
                command: ctest -T test --no-compress-output --output-on-failure -R tests.unit.plugins.statistics
            - <<: *convert_xml
            - store_test_results:
                path: tests.unit.plugins.statistics
            - store_artifacts:
                path: tests.unit.plugins.statistics
    tests.unit.group_1:
        <<: *docker_config
        working_directory: /phylanx/build
        steps:
            - <<: *attach_phylanx_tree
            - <<: *avoid_cmake_rerun
            - <<: *justify_building_all
            - run:
                name: Justify build
                command: ninja -n -d explain tests.unit.{execution_tree,ast,algorithm,execution_tree.primitives_}
            - run:
                name: Build tests.unit.{execution_tree,ast,algorithm,execution_tree.primitives_}
                command: cmake --build . -- -j1 tests.unit.{execution_tree,ast,algorithm,execution_tree.primitives_}
            - run:
                name: Run tests.unit.{execution_tree,ast,algorithm,primitives}
                command: ctest -T test --no-compress-output --output-on-failure -R 'tests.unit.(execution_tree|ast|algorithm|primitives)'
            - <<: *convert_xml
            - store_test_results:
                path: tests.unit.group_1
            - store_artifacts:
                path: tests.unit.group_1
    tests.unit.group_2:
        <<: *docker_config
        working_directory: /phylanx/build
        steps:
            - <<: *attach_phylanx_tree
            - <<: *avoid_cmake_rerun
            - <<: *justify_building_all
            - run:
                name: Justify build
                working_directory: /phylanx/build
                command: ninja -n -d explain tests.unit.{config,ir,util,performance_counters,python}
            - run:
                name: Build tests.unit.{config,ir,util,performance_counters,python}
                command: cmake --build . -- -j1 tests.unit.{config,ir,util,performance_counters,python}
            - run:
                name: Run tests.unit.config
                command: ctest -T test --no-compress-output --output-on-failure -R 'tests.unit.(config|ir|util|performance_counters|python)'
            - <<: *convert_xml
            - store_test_results:
                path: tests.unit.group_2
            - store_artifacts:
                path: tests.unit.group_2
    deploy_image:
        <<: *docker_config
        environment:
            TARGET_IMAGE_NAME: stellargroup/phylanx:devel
        steps:
            - <<: *attach_phylanx_tree
            - <<: *avoid_cmake_rerun
            - <<: *justify_building_all
            - run:
                name: Justify build
                command: ninja -n -d explain install
                working_directory: /phylanx/build
            - run:
                name: Installing
                command: cmake --build /phylanx/build --target install -- -j1
            - run:
                name: Installing Python front-end
                command: python3 python/setup_Debug.py install
                working_directory: /phylanx/build
            - run:
                name: Install Docker
                environment:
                    VER: 18.03.0-ce
                command: |
                    curl -JL https://download.docker.com/linux/static/stable/x86_64/docker-${VER}.tgz | \
                        tar xz --strip-components=1
                working_directory: /usr/bin/
            - setup_remote_docker
            - run:
                name: Create Docker Image
                command: |
                    docker build -t ${TARGET_IMAGE_NAME} -f /phylanx/src/tools/docker/circleci/Dockerfile .
                working_directory: /usr/local
            - run:
                name: Test installation
                command: docker run --rm ${TARGET_IMAGE_NAME} physl --hpx:threads=1 --code=1+2 --print
            # Deployment
            - run:
                name: Add Github's key(s) to known_hosts
                command: |
                    mkdir -p ~/.ssh
                    ssh-keyscan -H github.com >>~/.ssh/known_hosts
            - run:
                name: Configure local Git
                command: |
                    git config --global user.name "StellarBot"
                    git config --global user.email "stellar@cct.lsu.edu"
            - deploy:
                name: Push the Phylanx build environment Docker image and tag the commit
                command: |
                  if [[ -z "$CIRCLE_PR_NUMBER" ]] && [[ "${CIRCLE_BRANCH}" == "master" ]]; then
                    # Push the Docker image
                    docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
                    docker push ${TARGET_IMAGE_NAME}
                    # Tag the commmit
                    git tag -f stable
                    # NOTE: Dependency on the Docker push is so that users who
                    # use the Docker image would not be confused. Do not change
                    # the order before considering every use case.
                    # Remove the old tag
                    git push origin :refs/tags/stable
                    # Push the new stable commit tag
                    git push --tags
                  else
                    echo "Not on the master branch. the image will not be pushed and the commit will not be tagged."
                  fi

################################################################################
workflows:
    version: 2
    build_and_test_phylanx:
        jobs:
            - configure:
                <<: *ignore_docs
            - check.test_coverage:
                requires:
                    - configure
            - build:
                requires:
                    - configure
            - docs_push:
                <<: *docs_push_branch_filter
                requires:
                    - build
            - check.code_format.inspect:
                requires:
                    - configure
            - check.code_format.flake8:
                requires:
                    - configure
            - check.help_format:
                requires:
                    - build
            - tests.regressions:
                requires:
                    - build
            - tests.unit.plugins.arithmetics:
                requires:
                    - build
            - tests.unit.plugins.booleans:
                requires:
                    - build
            - tests.unit.plugins.controls:
                requires:
                    - build
            - tests.unit.plugins.fileio_solvers:
                requires:
                    - build
            - tests.unit.plugins.keras_support:
                requires:
                    - build
            - tests.unit.plugins.listops:
                requires:
                    - build
            - tests.unit.plugins.matrixops:
                requires:
                    - build
            - tests.unit.plugins.statistics:
                requires:
                    - build
            - tests.unit.group_1:
                requires:
                    - build
            - tests.unit.group_2:
                requires:
                    - build
            - tests.unit.distributed:
                requires:
                    - build
            - deploy_image:
                requires:
                    - build
                    - check.code_format.inspect
                    - check.code_format.flake8
                    - check.help_format
                    - tests.regressions
                    - tests.unit.plugins.arithmetics
                    - tests.unit.plugins.booleans
                    - tests.unit.plugins.controls
                    - tests.unit.plugins.fileio_solvers
                    - tests.unit.plugins.keras_support
                    - tests.unit.plugins.listops
                    - tests.unit.plugins.matrixops
                    - tests.unit.plugins.statistics
                    - tests.unit.group_1
                    - tests.unit.group_2
                    - tests.unit.distributed
